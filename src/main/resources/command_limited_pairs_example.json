{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://oasis-open.org/openc2/v1.0/ls-command.json",
  "title": "The OpenC2 1.0 Language Spec Command Schema",

  "type": "object",
  "required": [
    "action",
    "target"
  ],

  "properties": {
    "action": { "$ref": "#/definitions/action" },
    "target": { "$ref": "#/definitions/target" },
    "args": { "$ref": "#/definitions/args" },
    "actuator": { "$ref": "#/definitions/actuator" },
    "command_id": { "$ref": "#/definitions/command" }
  },
  "additionalProperties": false,

  "$comment": "EXAMPLE usage below of how one might use oneOf to limit a call to only a supported subset of action-target pairs",
  "oneOf": [
    {
      "properties": {
        "action": { "const": "query" },
        "target": { "properties": { "features": { "$ref": "#/definitions/features" } } }
      }
    },
    {
      "properties": {
        "action": { "const": "deny" },
        "target": { "properties": { "file": { "$ref": "#/definitions/file" } } }
      }
    },
    {
      "properties": {
        "action": { "const": "allow" },
        "target": { "properties": { "file": { "$ref": "#/definitions/file" } } }
      }
    },
    {
      "properties": {
        "action": { "const": "contain" },
        "target": { "properties": { "device": { "$ref": "#/definitions/device" } } }
      }
    },
    {
      "properties": {
        "action": { "const": "allow" },
        "target": { "properties": { "device": { "$ref": "#/definitions/device" } } }
      }
    },
    {
      "properties": {
        "action": { "const": "remediate" },
        "target": { "properties": { "file": { "$ref": "#/definitions/file" } } }
      }
    }
  ],

  "definitions": {
    "action": {
      "title": "OpenC2 Action",
      "$comment": "Only using oneOf with const instead of enum directly to have titles on each item",
      "type": "string",
      "oneOf": [
        { "const":  "scan", "title": "Systematic examination of some aspect of the entity or its environment." },
        { "const":  "locate", "title": "Find an object physically, logically, functionally, or by organization." },
        { "const":  "query", "title": "Initiate a request for information." },
        { "const":  "deny", "title": "Prevent a certain event or action from completion, such as preventing a flow from reaching a destination or preventing access." },
        { "const":  "contain", "title": "Isolate a file, process, or entity so that it cannot modify or access assets or processes." },
        { "const":  "allow", "title": "Permit access to or execution of a Target." },
        { "const":  "start", "title": "Initiate a process, application, system, or activity." },
        { "const":  "stop", "title": "Halt a system or end an activity." },
        { "const":  "restart", "title": "Stop then start a system or an activity." },
        { "const":  "cancel", "title": "Invalidate a previously issued Action." },
        { "const":  "set", "title": "Change a value, configuration, or state of a managed entity." },
        { "const":  "update", "title": "Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update." },
        { "const":  "redirect", "title": "Change the flow of traffic to a destination other than its original destination.\n" },
        { "const":  "create", "title": "Add a new entity of a known type (e.g., data, files, directories).\n" },
        { "const":  "delete", "title": "Remove an entity (e.g., data, files, flows).\n" },
        { "const":  "detonate", "title": "Execute and observe the behavior of a Target (e.g., file, hyperlink) in an isolated environment.\n" },
        { "const":  "restore", "title": "Return a system to a previously known state.\n" },
        { "const":  "copy", "title": "Duplicate an object, file, data flow or artifact.\n" },
        { "const":  "investigate", "title": "Task the recipient to aggregate and report information as it pertains to a security event or incident.\n" },
        { "const":  "remediate", "title": "Task the recipient to eliminate a vulnerability or attack point.\n" }
      ]
    },

    "actuator": {
      "title": "OpenC2 Actuator",
      "type": "object",
      "properties": {
        "slpf": {
          "title": "Actuator Specifiers defined in the Stateless Packet Filter profile",
          "$comment": "To be pulled from SLPF spec and dropped into here",
          "type": "object"
        }
      },
      "patternProperties": {
        "^x-[A-Za-z0-9_]*$": {
          "$comment": "Non-OASIS extensions must start with x-",
          "type": "object"
        }
      },
      "additionalProperties": false
    },

    "args": {
      "title": "OpenC2 Args",
      "type": "object",
      "properties": {
        "start_time": {
          "title": "The specific date/time to initiate the Action (milliseconds since the epoch)",
          "type": "integer",
          "minimum": 0
        },
        "stop_time": {
          "title": "The specific date/time to terminate the Action (milliseconds since the epoch)",
          "type": "integer",
          "minimum": 0
        },
        "duration": {
          "title": "The length of time for an Action to be in effect (milliseconds)",
          "type": "integer",
          "minimum": 0
        },
        "response_requested": {
          "title": "The type of Response required for the Action",
          "$comment": "Only using oneOf with const instead of enum directly to have titles on each item",
          "type": "string",
          "oneOf": [
            { "const":  "none", "title": "No response" },
            { "const":  "ack", "title": "Respond when Command received" },
            { "const":  "status", "title": "Respond with progress toward Command completion" },
            { "const":  "complete", "title": "Respond when all aspects of Command completed" }
          ]
        },
        "slpf": {
          "title": "Command Arguments defined in the Stateless Packet Filter profile",
          "type": "object"
        }
      },
      "patternProperties": {
        "^x-[A-Za-z0-9_]*$": {
          "$comment": "Non-OASIS extensions must start with x-",
          "type": "object"
        }
      },
      "additionalProperties": false
    },

    "artifact": {
      "type": "object",
      "title": "OpenC2 Artifact",
      "properties": {
        "mime_type": {
          "$comment": "Why is this called mime_type when it is referencing a media-type RFC?",
          "title": "Permitted values specified in the IANA Media Types registry, RFC 6838",
          "type": "string"
        },
        "payload": { "$ref": "#/definitions/payload" },
        "hashes": { "$ref": "#/definitions/hashes" }
      },
      "additionalProperties": false
    },

    "binary": {
      "title": "OpenC2 Binary",
      "$comment": "Possible that only base64 is supported and not base64url (which spec specifies here)",
      "type": "string",
      "contentEncoding": "base64"
    },

    "command": {
      "title": "OpenC2 Command Identifier",
      "$comment": "Could add minimum and maximum length validators here, or a format regex to check for uuid",
      "type": "string"
    },

    "device": {
      "title": "OpenC2 Device",
      "$comment": "Upgraded to require either a hostname or a device_id (or both), which is more useful",
      "properties": {
        "hostname": {
          "title": "A hostname that can be used to connect to this device over a network",
          "$ref": "#/definitions/hostname"
        },
        "description": {
          "title": "A human-readable description of the purpose, relevance, and/or properties of this device",
          "type": "string"
        },
        "device_id": {
          "title": "An identifier that refers to this device within an inventory or management system",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "anyOf": [
        { "required": ["hostname"] },
        { "required": ["device_id"] }
      ]
    },

    "domain_name": {
      "title": "RFC 1034, section 3.5",
      "$comment": "Upgraded to RFC5890 to support internationalized hostname",
      "type": "string",
      "format": "idn-hostname"
    },

    "email_addr": {
      "title": "Email address",
      "$comment": "Upgraded to validate using email format in RFC5322 and internationalized email in RFC6531",
      "type": "string",
      "format": "idn-email"
    },

    "features": {
      "title": "An array of zero to ten names used to query an Actuator for its supported capabilities.",
      "$comment": "Upgraded to not allow repeating enums in the array (unique items only). Only using oneOf with const instead of enum directly to have titles on each item",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "title": "OpenC2 Features items",
        "type": "string",
        "oneOf": [
          { "const":  "versions", "title": "List of OpenC2 Language versions supported by this Actuator" },
          { "const":  "profiles", "title": "List of profiles supported by this Actuator" },
          { "const":  "pairs", "title": "List of supported Actions and applicable Targets" },
          { "const":  "rate_limit", "title": "Maximum number of requests per minute supported by design or policy" }
        ]
      }
    },

    "file": {
      "title": "OpenC2 File",
      "$comment": "Upgraded to require any one of these (or more), which is more useful",
      "properties": {
        "name": {
          "title": "The name of the file as defined in the file system",
          "$ref": "#/definitions/hostname"
        },
        "path": {
          "title": "The absolute path to the location of the file in the file system",
          "type": "string"
        },
        "hashes": {
          "title": "One or more cryptographic hash codes of the file contents",
          "$ref": "#/definitions/hashes"
        }
      },
      "minProperties": 1,
      "additionalProperties": false
    },

    "hashes": {
      "title": "OpenC2 Hashes",
      "$comment": "Upgrade to require at least one of (the spec allows it to be empty, but that is not useful",
      "properties": {
        "md5": {
          "title": "MD5 hash as defined in RFC 1321",
          "$ref": "#/definitions/binary"
        },
        "sha1": {
          "title": "SHA1 hash as defined in RFC 6234",
          "$ref": "#/definitions/binary"
        },
        "sha256": {
          "title": "SHA256 hash as defined in RFC 6234",
          "$ref": "#/definitions/binary"
        }
      },
      "minProperties": 1,
      "additionalProperties": false
    },

    "hostname": {
      "title": "A legal Internet host name as specified in RFC 1123",
      "$comment": "Upgraded to RFC5890 to support internationalized hostname (which is RFC 1034 compliant and more appropriate)",
      "type": "string",
      "format": "idn-hostname"
    },

    "ip_addr": {
      "title": "32 bit IPv4 address or 128 bit IPv6 address",
      "$comment": "Upgraded to be a string matching either standard ipv4 or ipv6 notation",
      "oneOf": [
        { "type": "string", "format": "ipv4"},
        { "type": "string", "format": "ipv6"}
      ]
    },

    "ip_connection": {
      "title": "OpenC2 IP Connection",
      "$comment": "Upgrade to require at least one property; TODO - Add if statement for: src_addr and dst_addr MUST be the same version (ipv4 or ipv6) if both are present.",
      "type": "object",
      "properties": {
        "src_addr": {
          "title": "ip_addr of source, could be ipv4 or ipv6 - see ip_addr section",
          "$ref": "#/definitions/ip_addr"
        },
        "src_port": {
          "title": "source service per RFC 6335",
          "$ref": "#/definitions/port"
        },
        "dst_addr": {
          "title": "ip_addr of destination, could be ipv4 or ipv6 - see ip_addr section",
          "$ref": "#/definitions/ip_addr"
        },
        "dst_port": {
          "title": "destination service per RFC 6335",
          "$ref": "#/definitions/port"
        },
        "protocol": {
          "title": "layer 4 protocol (e.g., TCP) - see l4_protocol section",
          "$ref": "#/definitions/l4_protocol"
        }
      },
      "minProperties": 1,
      "additionalProperties": false
    },

    "l4_protocol": {
      "title": "Value of the protocol (IPv4) or next header (IPv6) field in an IP packet. Any IANA value, RFC 5237",
      "$comment": "Only using oneOf with const instead of enum directly to have titles on each item",
      "type": "string",
      "oneOf": [
        { "const": "icmp", "title": "Internet Control Message Protocol - RFC 792" },
        { "const": "tcp", "title": "Transmission Control Protocol - RFC 793" },
        { "const": "udp", "title": "User Datagram Protocol - RFC 768" },
        { "const": "sctp", "title": "Stream Control Transmission Protocol - RFC 4960" }
      ],
      "additionalProperties": false
    },

    "mac_addr": {
      "title": "OpenC2 MAC Address",
      "$comment": "Upgraded this to a string in standard MAC Address Format",
      "type": "string",
      "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
    },

    "payload": {
      "title": "OpenC2 Payload",
      "$comment": "Why is this 'url' instead of 'uri'?",
      "properties": {
        "bin": {
          "title": "Specifies the data contained in the artifact",
          "$ref": "#/definitions/binary"
        },
        "url": {
          "title": "MUST be a valid URL that resolves to the un-encoded content",
          "$ref": "#/definitions/uri"
        }
      },
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false
    },

    "port": {
      "title": "Transport Protocol Port Number, RFC 6335",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },

    "process": {
      "title": "OpenC2 Process",
      "$comment": "Upgraded to require at least one property specified",
      "type": "object",
      "properties": {
        "pid": {
          "title": "Process ID of the process",
          "type": "integer",
          "minimum": 0
        },
        "name": {
          "title": "Name of the process",
          "type": "string"
        },
        "cwd": {
          "title": "Current working directory of the process",
          "type": "string"
        },
        "executable": {
          "title": "Executable that was executed to start the process",
          "$ref": "#/definitions/file"
        },
        "parent": {
          "title": "Process that spawned this one",
          "$ref": "#/definitions/process"
        },
        "command_line": {
          "title": "The full command line invocation used to start this process, including all arguments",
          "type": "string"
        }
      },
      "minProperties": 1,
      "additionalProperties": false
    },

    "properties": {
      "title": "OpenC2 Properties",
      "$comment": "Upgraded to not allow repeating items in the array (unique items only)",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "title": "OpenC2 Properties items",
        "type": "string"
      }
    },

    "slpf:rule_number": {
      "title": "Rule identifier returned from allow or deny command.",
      "type": "integer"
    },

    "target": {
      "title": "OpenC2 Target",
      "properties": {
        "artifact": {
          "title": "An array of bytes representing a file-like object or a link to that object.",
          "$ref": "#/definitions/artifact"
        },
        "command": {
          "title": "A reference to a previously issued Command.",
          "$ref": "#/definitions/command"
        },
        "device": {
          "title": "The properties of a hardware device.",
          "$ref": "#/definitions/device"
        },
        "domain_name": {
          "title": "A network domain name.",
          "$ref": "#/definitions/domain_name"
        },
        "email_addr": {
          "title": "A single email address.",
          "$ref": "#/definitions/email_addr"
        },
        "features": {
          "title": "A set of items used with the query Action to determine an Actuator's capabilities.",
          "$ref": "#/definitions/features"
        },
        "file": {
          "title": "Properties of a file.",
          "$ref": "#/definitions/file"
        },
        "ip_addr": {
          "title": "An IP address (either version 4 or version 6).",
          "$ref": "#/definitions/ip_addr"
        },
        "ip_connection": {
          "title": "A network connection that originates from a source and is addressed to a destination. Source and destination addresses may be either IPv4 or IPv6; both should be the same version",
          "$ref": "#/definitions/ip_connection"
        },
        "mac_addr": {
          "title": "A Media Access Control (MAC) address - EUI-48 or EUI-64",
          "$ref": "#/definitions/mac_addr"
        },
        "process": {
          "title": "Common properties of an instance of a computer program as executed on an operating system.",
          "$ref": "#/definitions/process"
        },
        "properties": {
          "title": "Data attribute associated with an Actuator",
          "$ref": "#/definitions/properties"
        },
        "uri": {
          "title": "A uniform resource identifier(URI).",
          "$ref": "#/definitions/uri"
        },
        "slpf:rule_number": {
          "title": "Immutable identifier assigned when a rule is created, Identifies a rule to be deleted.",
          "$ref": "#/definitions/slpf:rule_number"
        }
      },
      "patternProperties": {
        "^x-[A-Za-z0-9_][A-Za-z0-9_]*:[A-Za-z0-9_][A-Za-z0-9_]*$": {
          "$comment": "Non-OASIS target extensions must start with x- and be separated by a colon",
          "type": "object"
        }
      },
      "minProperties": 1,
      "maxProperties": 1,
      "additionalProperties": false
    },

    "uri": {
      "title": "OpenC2 URI",
      "$comment": "Upgraded this to IRI spec RFC3987 to support internationalized URIs",
      "type": "string",
      "format": "iri"
    }
  }
}